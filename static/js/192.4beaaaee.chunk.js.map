{"version":3,"file":"static/js/192.4beaaaee.chunk.js","mappings":"sLAEaA,E,QAAeC,GAAAA,IAAH,+E,0KCoBZC,GAnBgBD,EAAAA,GAAAA,IAAH,kcAmBNA,EAAAA,EAAAA,IAAOE,EAAAA,GAAPF,CAAH,0MAUJG,GAAQH,EAAAA,EAAAA,IAAOI,EAAAA,GAAPJ,CAAH,6PAgBLK,EAAUL,EAAAA,GAAAA,OAAH,mZAmBPM,EAAWN,EAAAA,GAAAA,KAAH,6M,SC/DRO,EAAY,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAK1B,OACE,SAAC,KAAD,CAAQC,cAAe,CAAEC,MAAO,IAAMF,SALnB,SAACG,EAAQC,GAC5BJ,EAASG,GACTC,EAAQC,WACT,EAEC,UACE,UAACZ,EAAD,CAAMa,aAAa,MAAnB,WACE,SAACT,EAAD,CAASU,KAAK,YACd,SAACT,EAAD,sBACA,4BACE,SAACH,EAAD,CAAOa,KAAK,QAAQD,KAAK,OAAOE,YAAY,wBAKrD,E,8BCwCD,EArDgB,WACb,OAAwCC,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KACA,GAAoCC,EAAAA,EAAAA,UAAS,IAA7C,eAAOC,EAAP,KAAmBC,EAAnB,KACA,GAA0BF,EAAAA,EAAAA,UAAS,MAAnC,eAAOG,EAAP,KAAcC,EAAd,KACMC,GAAWC,EAAAA,EAAAA,OAEjBC,EAAAA,EAAAA,YAAU,WAAO,IAAD,EACRC,EAAS,UAAGV,EAAaW,IAAI,gBAApB,QAAgC,GAC/C,GAAKD,EAAL,CAEA,IAAME,EAAa,mCAAG,gHAEQC,EAAAA,EAAAA,IAAaH,GAFrB,gBAIK,KAFfI,EAFU,EAEVA,SAEIC,OACVT,EACE,4EAIFF,EAAcU,GACdR,EAAS,OAXO,gDAclBA,EAAS,iCACTF,EAAc,IAfI,yDAAH,qDAkBnBQ,GApBsB,CAqBvB,GAAE,CAACZ,IAOJ,OADFgB,QAAQC,IAAIZ,IAER,6BACE,SAACjB,EAAD,CAAWC,SAPM,SAAA6B,GACnBjB,EAAgB,CAAEkB,MAAOD,EAAM3B,MAAM6B,QACtC,IAMIf,IAAS,SAAC,IAAD,UAAeA,KACzB,wBACGF,EAAWkB,KAAI,SAAAC,GAAS,OACvB,yBACE,SAAC,KAAD,CAAMC,GAAE,kBAAaD,EAAUE,IAAMC,MAAO,CAAEC,KAAMnB,GAApD,SACGe,EAAU/B,SAFN+B,EAAUE,GADI,QAUhC,C,mMCzDIG,EAAU,mCAEHC,EAAmB,mCAAG,sGACVC,EAAAA,EAAAA,IAAA,kEACsCF,IAF5B,uBACzBG,EADyB,EACzBA,KADyB,kBAK1BA,GAL0B,2CAAH,qDASnBjB,EAAY,mCAAG,WAAMM,GAAN,yFACHU,EAAAA,EAAAA,IAAA,4DACgCF,EADhC,iCACgER,EADhE,gCADG,uBAClBW,EADkB,EAClBA,KADkB,kBAKnBA,GALmB,2CAAH,sDAQZC,EAAe,mCAAG,WAAMC,GAAN,yFACNH,EAAAA,EAAAA,IAAA,6CACiBG,EADjB,oBACoCL,EADpC,oBADM,uBACrBG,EADqB,EACrBA,KADqB,kBAItBA,GAJsB,2CAAH,sDAOfG,EAAe,mCAAG,WAAMD,GAAN,yFACNH,EAAAA,EAAAA,IAAA,6CACiBG,EADjB,4BAC4CL,EAD5C,oBADM,uBACrBG,EADqB,EACrBA,KADqB,kBAKtBA,GALsB,2CAAH,sDASfI,EAAkB,mCAAG,WAAMF,GAAN,yFACTH,EAAAA,EAAAA,IAAA,6CACiBG,EADjB,4BAC4CL,EAD5C,2BADS,uBACxBG,EADwB,EACxBA,KAGVd,QAAQC,IAAIa,GAJsB,kBAKzBA,GALyB,2CAAH,qD","sources":["components/ErrorMessage.styled.js","components/SearchBox/SearchBox.styled.js","components/SearchBox/SearchBox.js","pages/Movies.js","services/api.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const ErrorMessage = styled.div`\n  color: red;\n  margin: 0 auto;\n  font-size: 24px;\n\n`;\n","import styled from 'styled-components';\nimport { Form as FormikForm, Field as FieldImput } from 'formik';\n\nexport const SearchbarWrap = styled.div`\n  top: 0;\n  left: 0;\n  position: sticky;\n  z-index: 1100;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  min-height: 64px;\n  padding-right: 24px;\n  padding-left: 24px;\n  padding-top: 12px;\n  padding-bottom: 12px;\n  color: #fff;\n  background-color: #44efe3;\n  box-shadow: 0px 2px 4px -1px rgba(0, 0, 0, 0.2),\n    0px 4px 5px 0px rgba(0, 0, 0, 0.14), 0px 1px 10px 0px rgba(0, 0, 0, 0.12);\n`;\n\nexport const Form = styled(FormikForm)`\n  display: flex;\n  align-items: center;\n  width: 100%;\n  max-width: 600px;\n  background-color: #fff;\n  border-radius: 3px;\n  overflow: hidden;\n  border: 2px solid gray;\n`;\nexport const Field = styled(FieldImput)`\n  display: inline-block;\n  width: 100%;\n  font: inherit;\n  font-size: 20px;\n  border: none;\n  outline: none;\n  padding-left: 4px;\n  padding-right: 4px;\n\n  &::placeholder {\n    font: inherit;\n    font-size: 18px;\n  }\n`;\n\nexport const BtnWrap = styled.button`\n  display: inline-block;\n  width: 48px;\n  height: 48px;\n  border: 0;\n  background-image: url('https://circumicons.com/icon/search');\n  background-size: 40%;\n  background-repeat: no-repeat;\n  background-position: center;\n  opacity: 0.6;\n  transition: opacity 250ms cubic-bezier(0.4, 0, 0.2, 1);\n  cursor: pointer;\n  outline: none;\n\n  &:hover {\n    opacity: 1;\n  }\n`;\n\nexport const LabelBtn = styled.span`\n  position: absolute;\n  width: 1px;\n  height: 1px;\n  padding: 0;\n  overflow: hidden;\n  clip: rect(0, 0, 0, 0);\n  white-space: nowrap;\n  clip-path: inset(50%);\n  border: 0;\n`;\n","import { Formik } from 'formik';\nimport PropTypes from 'prop-types';\nimport { Form, Field, BtnWrap, LabelBtn } from '../SearchBox/SearchBox.styled';\n\nexport const SearchBox = ({ onSubmit }) => {\n  const handelSubmit = (values, actions) => {\n    onSubmit(values);\n    actions.resetForm();\n  };\n  return (\n    <Formik initialValues={{ title: '' }} onSubmit={handelSubmit}>\n      <Form autoComplete=\"off\">\n        <BtnWrap type=\"submit\"></BtnWrap>\n        <LabelBtn>Search</LabelBtn>\n        <label>\n          <Field name=\"title\" type=\"text\" placeholder=\"Search movies\" />\n        </label>\n      </Form>\n    </Formik>\n  );\n};\n\nSearchBox.propTypes = {\n  onSubmit: PropTypes.func.isRequired,\n};\n","import { useLocation, useSearchParams, Link } from 'react-router-dom';\n\nimport { SearchBox } from '../components/SearchBox/SearchBox';\nimport { ErrorMessage } from 'components/ErrorMessage.styled';\nimport {searchMovies} from '../services/api'\nimport { useEffect, useState } from 'react';\n\n const Movies = () => {\n   const [searchParams, setSearchParams] = useSearchParams();\n   const [dataMovies, setDataMovies] = useState([]);\n   const [error, setError] = useState(null);\n   const location = useLocation();\n\n   useEffect(() => {\n     const movieName = searchParams.get('query') ?? '';\n     if (!movieName) return;\n\n     const searchMovies2 = async () => {\n       try {\n         const { results } = await searchMovies(movieName);\n\n         if (results.length === 0) {\n           setError(\n             'Sorry, there are no movie matching your search query. Please try again.'\n           );\n         } else {\n           \n           setDataMovies(results);\n           setError(null);\n         }\n       } catch (error) {\n         setError('Error, try reloading the page');\n         setDataMovies([]);\n       }\n     };\n     searchMovies2();\n   }, [searchParams]);\n   \n   const handleSubmit = value => {\n     setSearchParams({ query: value.title.trim() });\n   };\n   \n console.log(error);\n   return (\n     <main>\n       <SearchBox onSubmit={handleSubmit} />\n       {error && <ErrorMessage>{error}</ErrorMessage>}\n       <ul>\n         {dataMovies.map(dataMovie => (\n           <li key={dataMovie.id}>\n             <Link to={`/movies/${dataMovie.id}`} state={{ from: location }}>\n               {dataMovie.title}\n             </Link>\n           </li>\n         ))}\n       </ul>\n     </main>\n   );\n };\n\nexport default Movies;","import axios from \"axios\";\nconst API_KEY = '48fb147532276641d9f1a55b83b3113d';\n\nexport const fetchMoviesTrending = async () => {\n  const { data } = await axios.get(\n    `https://api.themoviedb.org/3/trending/movie/day?api_key=${API_KEY}`\n  );\n \n  return data;\n  \n}\n\nexport const searchMovies = async query => {\n  const { data } = await axios.get(\n    `https://api.themoviedb.org/3/search/movie?api_key=${API_KEY}&language=en-US&query=${query}&page=1&include_adult=false`\n  );\n \n  return data;\n};\n\nexport const fetchMoviesById = async movieId => {\n  const { data } = await axios.get(\n    `https://api.themoviedb.org/3/movie/${movieId}?api_key=${API_KEY}&language=en-US`\n  );\n  return data;\n};\n\nexport const fetchMoviesCast = async movieId => {\n  const { data } = await axios.get(\n    `https://api.themoviedb.org/3/movie/${movieId}/credits?api_key=${API_KEY}&language=en-US`\n  );\n\n  return data;\n  \n};\n\nexport const fetchMoviesReviews = async movieId => {\n  const { data } = await axios.get(\n    `https://api.themoviedb.org/3/movie/${movieId}/reviews?api_key=${API_KEY}&language=en-US&page=1`\n  );\nconsole.log(data);\n  return data;\n  \n};\n"],"names":["ErrorMessage","styled","Form","FormikForm","Field","FieldImput","BtnWrap","LabelBtn","SearchBox","onSubmit","initialValues","title","values","actions","resetForm","autoComplete","type","name","placeholder","useSearchParams","searchParams","setSearchParams","useState","dataMovies","setDataMovies","error","setError","location","useLocation","useEffect","movieName","get","searchMovies2","searchMovies","results","length","console","log","value","query","trim","map","dataMovie","to","id","state","from","API_KEY","fetchMoviesTrending","axios","data","fetchMoviesById","movieId","fetchMoviesCast","fetchMoviesReviews"],"sourceRoot":""}